version: '3.7'
services:
  users-db:
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - '5432:5432'
    volumes:
      - users-db:/var/lib/postgresql/data

  posts-db:
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - '5433:5432'
    volumes:
      - posts-db:/var/lib/postgresql/data

  admin-db:
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - '5434:5432'
    volumes:
      - admin-db:/var/lib/postgresql/data

  gateway:
    image: kong:latest
    environment:
      KONG_DATABASE: 'off'
      KONG_DNS_ORDER: 'LAST,A,CNAME'
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    ports:
      - '8000:8000'
      - '8001:8001'
      - '8443:8443'
      - '8444:8444'
    volumes:
      - ./config/kong:/usr/local/kong/declarative

  users:
    build:
      context: ./user-service
      dockerfile: Dockerfile.dev
    command: npm start
    environment:
      PORT: 8081
      DATABASE_TYPE: postgres
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_HOST: users-db
      DATABASE_PORT: 5432
      DATABASE: postgres
      TOKEN_SECRET: 12345
    ports:
      - 8081:8081

  posts:
    build:
      context: ./post-service
    command: npm start
    environment:
      PORT: 8082
      DATABASE_TYPE: postgres
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_HOST: posts-db
      DATABASE_PORT: 5432
      DATABASE: postgres
      TOKEN_SECRET: 12345

  admin:
    build:
      context: ./admin-service
    command: npm start
    environment:
      PORT: 8083
      DATABASE_TYPE: postgres
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_HOST: admin-db
      DATABASE_PORT: 5432
      DATABASE: postgres
      TOKEN_SECRET: 12345

  auth:
    build:
      context: ./auth
      dockerfile: Dockerfile.dev
    command: npm start
    environment:
      PORT: 8084
      TOKEN_SECRET: 12345
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: on-failure
    ports:
      - 9090:9090
    volumes:
      - ./prometheus:/etc/prometheus
  grafana:
    image: grafana/grafana:7.5.2
    container_name: grafana
    restart: on-failure
    environment:
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    ports:
      - 3000:3000
    volumes:
      - ./provisioning:/etc/grafana/provisioning
      - grafana:/var/lib/grafana
    depends_on:
      - prometheus
  node-exporter:
    image: prom/node-exporter:v1.1.2
    container_name: node-exporter
    ports:
      - 9100:9100
  cadvisor:
    image: google/cadvisor
    container_name: cadvisor
    ports:
      - 8080:8080

volumes:
  grafana:
  prometheus:
  users-db:
  posts-db:
  admin-db:
